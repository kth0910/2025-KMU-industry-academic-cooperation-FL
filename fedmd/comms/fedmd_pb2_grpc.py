# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import fedmd_pb2 as fedmd__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in fedmd_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class FedMDStub(object):
    """FedMD gRPC 서비스 정의
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Register = channel.unary_unary(
                '/fedmd.FedMD/Register',
                request_serializer=fedmd__pb2.ClientHello.SerializeToString,
                response_deserializer=fedmd__pb2.ServerHello.FromString,
                _registered_method=True)
        self.UploadLogits = channel.unary_unary(
                '/fedmd.FedMD/UploadLogits',
                request_serializer=fedmd__pb2.LogitsBatch.SerializeToString,
                response_deserializer=fedmd__pb2.Ack.FromString,
                _registered_method=True)
        self.GetSoftTargets = channel.unary_unary(
                '/fedmd.FedMD/GetSoftTargets',
                request_serializer=fedmd__pb2.RoundQuery.SerializeToString,
                response_deserializer=fedmd__pb2.SoftTargetsBatch.FromString,
                _registered_method=True)
        self.ReportMetrics = channel.unary_unary(
                '/fedmd.FedMD/ReportMetrics',
                request_serializer=fedmd__pb2.MetricsReport.SerializeToString,
                response_deserializer=fedmd__pb2.Ack.FromString,
                _registered_method=True)
        self.GetRoundStatus = channel.unary_unary(
                '/fedmd.FedMD/GetRoundStatus',
                request_serializer=fedmd__pb2.RoundQuery.SerializeToString,
                response_deserializer=fedmd__pb2.RoundStatus.FromString,
                _registered_method=True)
        self.HealthCheck = channel.unary_unary(
                '/fedmd.FedMD/HealthCheck',
                request_serializer=fedmd__pb2.Empty.SerializeToString,
                response_deserializer=fedmd__pb2.HealthStatus.FromString,
                _registered_method=True)


class FedMDServicer(object):
    """FedMD gRPC 서비스 정의
    """

    def Register(self, request, context):
        """클라이언트 등록
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UploadLogits(self, request, context):
        """로짓 업로드
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSoftTargets(self, request, context):
        """소프트 타겟 수신
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReportMetrics(self, request, context):
        """메트릭 보고
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRoundStatus(self, request, context):
        """라운드 상태 확인
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HealthCheck(self, request, context):
        """서버 상태 확인
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FedMDServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Register': grpc.unary_unary_rpc_method_handler(
                    servicer.Register,
                    request_deserializer=fedmd__pb2.ClientHello.FromString,
                    response_serializer=fedmd__pb2.ServerHello.SerializeToString,
            ),
            'UploadLogits': grpc.unary_unary_rpc_method_handler(
                    servicer.UploadLogits,
                    request_deserializer=fedmd__pb2.LogitsBatch.FromString,
                    response_serializer=fedmd__pb2.Ack.SerializeToString,
            ),
            'GetSoftTargets': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSoftTargets,
                    request_deserializer=fedmd__pb2.RoundQuery.FromString,
                    response_serializer=fedmd__pb2.SoftTargetsBatch.SerializeToString,
            ),
            'ReportMetrics': grpc.unary_unary_rpc_method_handler(
                    servicer.ReportMetrics,
                    request_deserializer=fedmd__pb2.MetricsReport.FromString,
                    response_serializer=fedmd__pb2.Ack.SerializeToString,
            ),
            'GetRoundStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRoundStatus,
                    request_deserializer=fedmd__pb2.RoundQuery.FromString,
                    response_serializer=fedmd__pb2.RoundStatus.SerializeToString,
            ),
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=fedmd__pb2.Empty.FromString,
                    response_serializer=fedmd__pb2.HealthStatus.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'fedmd.FedMD', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('fedmd.FedMD', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class FedMD(object):
    """FedMD gRPC 서비스 정의
    """

    @staticmethod
    def Register(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/fedmd.FedMD/Register',
            fedmd__pb2.ClientHello.SerializeToString,
            fedmd__pb2.ServerHello.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UploadLogits(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/fedmd.FedMD/UploadLogits',
            fedmd__pb2.LogitsBatch.SerializeToString,
            fedmd__pb2.Ack.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSoftTargets(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/fedmd.FedMD/GetSoftTargets',
            fedmd__pb2.RoundQuery.SerializeToString,
            fedmd__pb2.SoftTargetsBatch.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReportMetrics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/fedmd.FedMD/ReportMetrics',
            fedmd__pb2.MetricsReport.SerializeToString,
            fedmd__pb2.Ack.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetRoundStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/fedmd.FedMD/GetRoundStatus',
            fedmd__pb2.RoundQuery.SerializeToString,
            fedmd__pb2.RoundStatus.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/fedmd.FedMD/HealthCheck',
            fedmd__pb2.Empty.SerializeToString,
            fedmd__pb2.HealthStatus.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
